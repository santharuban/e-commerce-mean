{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport jwtDecode from \"jwt-decode\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CartService {\n  constructor(http) {\n    this.http = http;\n    this.cartList = [];\n    this.productList = new BehaviorSubject([]);\n    this.search = new BehaviorSubject(\"\");\n    this.userCart = \"http://localhost:3000/api/usercart/userproduct\";\n  }\n  getproducts() {\n    return this.productList.asObservable();\n  }\n  addCart(item) {\n    const user = localStorage.getItem(\"user\");\n    if (user != null) {\n      this.userData = jwtDecode(user);\n      item.user = this.userData.userId;\n      this.http.post(`${this.userCart}`, item).subscribe();\n    }\n    this.cartList.push(item);\n    this.productList.next(this.cartList);\n    this.getTotalPrice();\n    this.postCartDb();\n  }\n  getTotalPrice() {\n    let grandtotal = 0;\n    let quantity;\n    this.cartList.map(item => {\n      quantity = item.quantity;\n      grandtotal += item.total * quantity;\n    });\n    return grandtotal;\n  }\n  removeitem(item) {\n    this.cartList.map((a, index) => {\n      if (item._id === a._id) {\n        this.cartList.splice(index, 1);\n      }\n    });\n    this.productList.next(this.cartList);\n  }\n  removeAll() {\n    this.cartList = [];\n    this.productList.next(this.cartList);\n  }\n  postCartDb() {\n    const cartData = {\n      UserCart: this.cartList\n    };\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)(i0.ɵɵinject(i1.HttpClient));\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAIA,SAASA,eAAe,QAAQ,MAAM;AACtC,OAAOC,SAAS,MAAM,YAAY;;;AAIlC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJjB,aAAQ,GAAQ,EAAE;IAClB,gBAAW,GAAG,IAAIJ,eAAe,CAAM,EAAE,CAAC;IAC1C,WAAM,GAAG,IAAIA,eAAe,CAAS,EAAE,CAAC;IAC/C,aAAQ,GAAG,gDAAgD;EACpB;EAGvCK,WAAW;IACT,OAAO,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACxC;EACAC,OAAO,CAACC,IAAc;IACpB,MAAMC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAIF,IAAI,IAAI,IAAI,EAAE;MAChB,IAAI,CAACG,QAAQ,GAAGZ,SAAS,CAACS,IAAI,CAAC;MAC/BD,IAAI,CAACC,IAAI,GAAG,IAAI,CAACG,QAAQ,CAACC,MAAM;MAChC,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,GAAG,IAAI,CAACC,QAAQ,EAAE,EAAEP,IAAI,CAAC,CAACQ,SAAS,EAAE;;IAEtD,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACV,IAAI,CAAC;IACxB,IAAI,CAACH,WAAW,CAACc,IAAI,CAAC,IAAI,CAACF,QAAQ,CAAC;IACpC,IAAI,CAACG,aAAa,EAAE;IACpB,IAAI,CAACC,UAAU,EAAE;EACnB;EACAD,aAAa;IACX,IAAIE,UAAU,GAAG,CAAC;IAClB,IAAIC,QAAQ;IACZ,IAAI,CAACN,QAAQ,CAACO,GAAG,CAAEhB,IAAS,IAAI;MAC9Be,QAAQ,GAAGf,IAAI,CAACe,QAAQ;MACxBD,UAAU,IAAId,IAAI,CAACiB,KAAK,GAAGF,QAAQ;IACrC,CAAC,CAAC;IACF,OAAOD,UAAU;EACnB;EACAI,UAAU,CAAClB,IAAc;IACvB,IAAI,CAACS,QAAQ,CAACO,GAAG,CAAC,CAACG,CAAW,EAAEC,KAAe,KAAI;MACjD,IAAIpB,IAAI,CAACqB,GAAG,KAAKF,CAAC,CAACE,GAAG,EAAE;QACtB,IAAI,CAACZ,QAAQ,CAACa,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;;IAElC,CAAC,CAAC;IACF,IAAI,CAACvB,WAAW,CAACc,IAAI,CAAC,IAAI,CAACF,QAAQ,CAAC;EACtC;EACAc,SAAS;IACP,IAAI,CAACd,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACZ,WAAW,CAACc,IAAI,CAAC,IAAI,CAACF,QAAQ,CAAC;EACtC;EAEAI,UAAU;IACR,MAAMW,QAAQ,GAAG;MAAEC,QAAQ,EAAE,IAAI,CAAChB;IAAQ,CAAE;EAC9C;;AA/CWhB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["BehaviorSubject","jwtDecode","CartService","constructor","http","getproducts","productList","asObservable","addCart","item","user","localStorage","getItem","userData","userId","post","userCart","subscribe","cartList","push","next","getTotalPrice","postCartDb","grandtotal","quantity","map","total","removeitem","a","index","_id","splice","removeAll","cartData","UserCart","factory","providedIn"],"sourceRoot":"","sources":["/home/asplap3259/Desktop/e-commerce-mean/frontend/src/app/service/cart.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { isNgTemplate } from \"@angular/compiler\";\nimport { Injectable } from \"@angular/core\";\nimport { products } from \"datatype\";\nimport { BehaviorSubject } from \"rxjs\";\nimport jwtDecode from \"jwt-decode\";\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CartService {\n  public cartList: any = [];\n  public productList = new BehaviorSubject<any>([]);\n  public search = new BehaviorSubject<string>(\"\");\n  userCart = \"http://localhost:3000/api/usercart/userproduct\";\n  constructor(private http: HttpClient) {}\n\n  public userData: any;\n  getproducts() {\n    return this.productList.asObservable();\n  }\n  addCart(item: products) {\n    const user = localStorage.getItem(\"user\");\n    if (user != null) {\n      this.userData = jwtDecode(user);\n      item.user = this.userData.userId;\n      this.http.post(`${this.userCart}`, item).subscribe();\n    }\n    this.cartList.push(item);\n    this.productList.next(this.cartList);\n    this.getTotalPrice();\n    this.postCartDb();\n  }\n  getTotalPrice(): number {\n    let grandtotal = 0;\n    let quantity;\n    this.cartList.map((item: any) => {\n      quantity = item.quantity;\n      grandtotal += item.total * quantity;\n    });\n    return grandtotal;\n  }\n  removeitem(item: products) {\n    this.cartList.map((a: products, index: products) => {\n      if (item._id === a._id) {\n        this.cartList.splice(index, 1);\n      }\n    });\n    this.productList.next(this.cartList);\n  }\n  removeAll() {\n    this.cartList = [];\n    this.productList.next(this.cartList);\n  }\n\n  postCartDb() {\n    const cartData = { UserCart: this.cartList };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}